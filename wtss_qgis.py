# -*- coding: utf-8 -*-
"""
/***************************************************************************
 wtss_qgis
                                 A QGIS plugin
 Python Client Library for Web Time Series Service
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-05-04
        git sha              : $Format:%H$
        copyright            : (C) 2020 by INPE
        email                : brazildatacube@dpi.inpe.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject
from qgis.gui import QgsMapToolEmitPoint

from PyQt5.QtCore import *
from PyQt5.QtGui import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .wtss_qgis_dialog import wtss_qgisDialog
import os.path

import matplotlib.pyplot as plt
import numpy as np
from wtss import wtss
from datetime import datetime


class wtss_qgis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'wtss_qgis_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&WTSS')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('wtss_qgis', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/wtss_qgis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'WTSS'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginWebMenu(
                self.tr(u'&WTSS'),
                action)
            self.iface.removeToolBarIcon(action)

    def addItemsMenuServices(self, parent, elements):
        for text, children in elements:
            item = QStandardItem(text)
            parent.appendRow(item)
            if children:
                self.addItemsMenuServices(item, children)

    def deleteService(self):
        print("Delete")

    def editService(self):
        print("Edit")

    def saveService(self):
        host_to_save = str(self.dlg.service_host.text())
        try:
            response = requests.get(host_to_save)
            status = int(response.status_code)
        except AttributeError:
            status = 404
        if status != 404 or status != 500:
            self.services.append(host_to_save)
            self.dlg.services_list.clear()
            self.dlg.services_list.addItems(self.services)
            self.dlg.services_list.itemActivated.connect(self.selectService)
            servers = []
            for server in self.services:
                self.client_wtss = wtss(server)
                coverage_tree = []
                for coverage in self.client_wtss.list_coverages().get('coverages', []):
                    band_list = []
                    for band in list(self.client_wtss.describe_coverage(coverage).get("attributes", {}).keys()):
                        band_list.append((
                            band, []
                        ))
                    coverage_tree.append((
                        coverage, band_list
                    ))
                servers.append((server, coverage_tree))
            self.data = [("Services", servers)]
            self.model = QStandardItemModel()
            self.addItemsMenuServices(self.model, self.data)
            self.dlg.data.setModel(self.model)

    def plotTimeSeries(self):
        self.client_wtss = wtss(self.selected_service)
        time_series = self.client_wtss.time_series(
            self.selected_coverage,
            (self.selected_band),
            self.selected_location.get('long', 0),
            self.selected_location.get('lat', 0),
            self.selected_start_date,
            self.selected_end_date
        )
        x = [str(date) for date in time_series.timeline]
        y = time_series.attributes[self.selected_band]
        plt.title("Coverage " + self.selected_coverage, fontsize=18)
        plt.xlabel("Date", fontsize=15)
        plt.ylabel(self.selected_band, fontsize=15)
        plt.xticks(np.arange(0, len(x), step=float(len(x) // 3)))
        plt.grid(b=True, color='gray', linestyle='--', linewidth=0.5)
        plt.plot(x, y, color = "black")
        plt.show()

    def selectService(self, item):
        self.selected_service = str(item.text())
        # Selecting coverages
        self.dlg.coverages_list.clear()
        self.client_wtss = wtss(self.selected_service)
        self.coverages = self.client_wtss.list_coverages().get('coverages',[])
        self.dlg.coverages_list.addItems(self.coverages)
        self.dlg.coverages_list.itemActivated.connect(self.selectCoverage)
        self.coverage_tree = []

    def selectCoverage(self, item):
        self.selected_coverage = str(item.text())
        # Selecting bands
        self.dlg.bands_list.clear()
        self.client_wtss = wtss(self.selected_service)
        self.bands = list(self.client_wtss.describe_coverage(self.selected_coverage).get("attributes", {}).keys())
        self.dlg.bands_list.addItems(self.bands)
        self.dlg.bands_list.itemActivated.connect(self.selectBand)

    def selectBand(self, item):
        self.selected_band = str(item.text())
        # Selecting Start Dates
        self.dlg.start_date_list.clear()
        self.client_wtss = wtss(self.selected_service)
        self.start_date_list = self.client_wtss.describe_coverage(self.selected_coverage).get("timeline", [])
        self.dlg.start_date_list.addItems(self.start_date_list)
        self.dlg.start_date_list.itemActivated.connect(self.selectStartDate)

    def selectStartDate(self, item):
        self.selected_start_date = str(item.text())
        # Selecting End Dates
        self.dlg.end_date_list.clear()
        valid_dates = []
        startDate = datetime.strptime(self.selected_start_date, '%Y-%m-%d')
        for dat in self.start_date_list:
            start = datetime.strptime(self.selected_start_date, '%Y-%m-%d')
            end = datetime.strptime(dat, '%Y-%m-%d')
            if start < end:
                valid_dates.append(dat)
        self.end_date_list = valid_dates
        self.dlg.end_date_list.addItems(self.end_date_list)
        self.dlg.end_date_list.itemActivated.connect(self.selectEndDate)

    def selectEndDate(self, item):
        self.selected_end_date = str(item.text())

    def getFromHistory(self, item):
        self.selected_location = self.locations.get(item.text(), {})

    def getLayers(self):
        self.layers = QgsProject.instance().layerTreeRoot().children()
        self.layer_names = [layer.name() for layer in self.layers] # Get all layer names
        self.layer = self.iface.activeLayer() # QVectorLayer QRasterFile

    def display_point(self, pointTool):
        try:
            self.selected_location = {
                'lat' : float(pointTool.x()),
                'long' : float(pointTool.y()),
                'crs' : str(self.layer.crs().authid())
            }
            history_key = str(
                (
                    "{layer_name} | " +
                    "({crs}) | " +
                    "Lat: {lat:,.2f} Long: {long:,.2f}"
                ).format(
                    layer_name = str(self.layer.name()),
                    crs = str(self.layer.crs().authid()),
                    lat = float(pointTool.x()),
                    long = float(pointTool.y())
                )
            )
            self.locations[history_key] = self.selected_location
            self.dlg.history_list.clear()
            self.dlg.history_list.addItems(list(self.locations.keys()))
            self.dlg.history_list.itemActivated.connect(self.getFromHistory)
        except AttributeError:
            pass


    def addCanvasControlPoint(self):
        self.canvas = self.iface.mapCanvas()

        self.point_tool = QgsMapToolEmitPoint(self.canvas)
        self.point_tool.canvasClicked.connect(self.display_point)

        self.canvas.setMapTool(self.point_tool)
        self.display_point(self.point_tool)

    def run(self):
        """Run method that performs all the real work"""
        # Declaring local variables
        self.default_host = 'http://www.esensing.dpi.inpe.br/'
        # Init Application
        self.dlg = wtss_qgisDialog()
        # Declaring global variables
        self.client_wtss = wtss(self.default_host)
        plt.clf()
        # Adding function to services controll
        # Services
        self.dlg.services_list.clear()
        self.services = [self.default_host]
        self.selected_service = self.default_host
        self.dlg.services_list.addItems(self.services)
        self.dlg.services_list.itemActivated.connect(self.selectService)
        # Coverages
        self.dlg.coverages_list.clear()
        self.selected_coverage = None
        self.coverages = self.client_wtss.list_coverages().get('coverages',[])
        self.dlg.coverages_list.addItems(self.coverages)
        self.dlg.coverages_list.itemActivated.connect(self.selectCoverage)
        # Bands
        self.dlg.bands_list.clear()
        self.bands = []
        self.selected_band = None
        self.dlg.bands_list.addItems(self.bands)
        self.dlg.bands_list.itemActivated.connect(self.selectBand)
        # Start Date
        self.dlg.start_date_list.clear()
        self.start_date_list = []
        self.selected_start_date = None
        self.dlg.start_date_list.addItems(self.start_date_list)
        self.dlg.start_date_list.itemActivated.connect(self.selectStartDate)
        # End Date
        self.dlg.end_date_list.clear()
        self.end_date_list = []
        self.selected_end_date = None
        self.dlg.end_date_list.addItems(self.end_date_list)
        self.dlg.end_date_list.itemActivated.connect(self.selectEndDate)
        # History
        self.dlg.history_list.clear()
        self.selected_location = None
        try:
            self.dlg.history_list.addItems(list(self.locations.keys()))
        except AttributeError:
            self.locations = {}
        self.dlg.history_list.itemActivated.connect(self.getFromHistory)
        # Get all layers from QGIS project
        self.getLayers()
        # show coordinates from canvas
        self.addCanvasControlPoint()
        # Add functions to buttons
        self.dlg.save_service.clicked.connect(self.saveService)
        self.dlg.delete_service.clicked.connect(self.deleteService)
        self.dlg.edit_service.clicked.connect(self.editService)
        self.dlg.plotTimeSeries.clicked.connect(self.plotTimeSeries)
        # QTreeView Regitered Services
        coverage_tree = []
        for coverage in self.client_wtss.list_coverages().get('coverages', []):
            band_list = []
            for band in list(self.client_wtss.describe_coverage(coverage).get("attributes", {}).keys()):
                band_list.append((
                    band, []
                ))
            coverage_tree.append((
                    coverage, band_list
            ))
        self.data = [("Services", [
            (self.default_host, coverage_tree)
        ])]
        self.model = QStandardItemModel()
        self.addItemsMenuServices(self.model, self.data)
        self.dlg.data.setModel(self.model)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
