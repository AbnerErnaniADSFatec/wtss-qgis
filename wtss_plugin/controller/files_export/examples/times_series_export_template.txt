#
# This file was generated by Python QGIS Plugin for WTSS.
#

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from wtss import WTSS

# Creating the client with selected service host
client = WTSS("{service_host}")

##
# Listing coverages
# Listing the Available Data Products

coverages = client.coverages

print(coverages)

##
# Getting coverage metadata
# Retrieving the Metadata of a Data Product
coverage_metadata = client["{selected_coverage}"]

print(coverage_metadata["attributes"])

timeline = coverage_metadata['timeline']

start = timeline[0]
end = timeline[-1]

print('Interval range: (' + start + ',' + end + ')')

print(coverage_metadata['spatial_extent'])

##
# Time series
# Retrieving the Time Series
bands = {selected_bands}
time_series = client["{selected_coverage}"].ts(
    attributes=bands,
    latitude={latitude},
    longitude={longitude},
    start_date="{start_date}",
    end_date="{end_date}"
)

# The x-axis will contain the time interval
x = [pd.to_datetime(date) for date in time_series.timeline]

fig = plt.figure(figsize = (12, 5))

plt.title("Coverage {selected_coverage}", fontsize=14)

plt.xlabel("Date", fontsize=10)

plt.ylabel("Value", fontsize=10)

plt.grid(color='gray', linestyle='--', linewidth=0.5)

def get_band_attributes(band):
    attributes = coverage_metadata.get('attributes')
    selected_band_attr = None
    for band_attr in attributes:
        if band_attr['name'] == band:
            selected_band_attr = band_attr
            break
    return selected_band_attr

for result in time_series.get("result")["attributes"]:

    band_name = result["attribute"]

    band_attributes = get_band_attributes(band_name)

    scale_factor = band_attributes["scale_factor"]

    # The y-axis will contain the values in each attribute
    y = result["values"]

    y = [float(value) * scale_factor for value in y]

    plt.plot(x, y, label = band_name)

plt.xlabel(None)
plt.ylabel(None)
plt.legend()
plt.show()

##
#